"use strict";angular.module("Legend",["ngMaterial","chart.js","ngProgress"]).config(function($mdThemingProvider){$mdThemingProvider.theme("docs-dark")}).config(["ChartJsProvider",function(ChartJsProvider){ChartJsProvider.setOptions({chartColors:["#FF5252","#222222"],responsive:!0}),ChartJsProvider.setOptions("line",{showLines:!1})}]);
"use strict";enchant(),window.onload=function(){var game=new Game(window.screen.height,window.screen.width);game.keybind(32,"a"),game.spriteSheetWidth=256,game.spriteSheetHeight=16,game.itemSpriteSheetWidth=64,game.preload(["public/char.png","public/map1.gif"]),game.items=[{price:1e3,description:"Hunter",id:0},{price:2e3,description:"Drg. Bay",id:1},{price:3e3,description:"Ice Magic",id:2},{price:4e3,description:"Chees Set",id:3}],game.fps=15,game.spriteWidth=16,game.spriteHeight=16,game.scale=1;new Map(game.spriteWidth,game.spriteHeight),new Map(game.spriteWidth,game.spriteHeight);game.onload=function(){var map=new Map(16,16);map.image=game.assets["public/map1.gif"],map.loadData([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]),game.rootScene.addChild(map)},game.start()};
"use strict";var mapData=[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],mapChar=[[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6],[0,5,6,0,5,6]];
"use strict";!function(angular){angular.module("Legend").controller("LegendController",["$scope","$timeout","$q","RepositoryService","StreakService","InformationService","CalculateSkillsService","ngProgressFactory",function($scope,$timeout,$q,RepositoryService,StreakService,InformationService,CalculateSkillsService,ngProgressFactory){$scope.model={},$scope.labels=["HP","MP","P.ATCK","P.DEF","CAST/SPEED","CRITICAL","ACCURACY","STAMINA"],$scope.series=["Avatar1","Avatar2"],$scope.inProcess=!1,$scope.progressbar=ngProgressFactory.createInstance(),$scope.compare=function(){$scope.progressbar.start(),$scope.inProcess=!0;var getUser1Repository=RepositoryService.getRepository($scope.model.user1),getUser2Repository=RepositoryService.getRepository($scope.model.user2),getUser1Streak=StreakService.findStreak($scope.model.user1),getUser2Streak=StreakService.findStreak($scope.model.user2),getUser1Information=InformationService.findUser($scope.model.user1),getUser2Information=InformationService.findUser($scope.model.user2);$q.all([getUser1Repository,getUser2Repository,getUser1Streak,getUser2Streak,getUser1Information,getUser2Information]).then(function(data){$timeout($scope.progressbar.complete(),1e3);var user1Repository=data[0],user1Streak=data[2],user1Information=data[4];console.log("current streak "+$scope.model.user1,user1Streak);var avatar1={repository:user1Repository,currentStreak:user1Streak,information:user1Information};$scope.user1Avatar=CalculateSkillsService.calculate(avatar1);var user2Repository=data[1],user2Streak=data[3],user2Information=data[5];console.log("current streak "+$scope.model.user2,user2Streak);var avatar2={repository:user2Repository,currentStreak:user2Streak,information:user2Information};$scope.user2Avatar=CalculateSkillsService.calculate(avatar2),$scope.data=[[$scope.user1Avatar.HP,$scope.user1Avatar.MP,$scope.user1Avatar.P_ATCK,$scope.user1Avatar.P_DEF,$scope.user1Avatar.CAST_SPEED,$scope.user1Avatar.CRITICAL,$scope.user1Avatar.ACCURACY,$scope.user1Avatar.STAMINA],[$scope.user2Avatar.HP,$scope.user2Avatar.MP,$scope.user2Avatar.P_ATCK,$scope.user2Avatar.P_DEF,$scope.user2Avatar.CAST_SPEED,$scope.user2Avatar.CRITICAL,$scope.user2Avatar.ACCURACY,$scope.user2Avatar.STAMINA]],$scope.inProcess=!1})}}])}(window.angular);
"use strict";!function(angular){angular.module("Legend").factory("CalculateSkillsService",["$http",function($http){var calculate=function(avatar){function calculateHP(){return(information.commits+streak)*information.commitsAvarage+(information.fallowers+getFallowingInformation()+getStartInformation())}function calculateMP(){return(information.commits+streak)*information.commitsAvarage}function calculatePAtack(){return(getRepositoryForks()+getRepositoryStar()+repositories.repositories.full.length+information.commits)*getRepositoriesRelevants()}function calculatePDef(){return(getRepositoryForks()+information.fallowers+getFallowingInformation()+getRepositoryStar()+repositories.repositories.full.length)*getRepositoriesRelevants()+information.commits*information.commitsAvarage}function calculateCastSpeed(){return(information.commits+streak)*getInformationOrganization()}function calculateCriticalChance(){return(information.commits+streak+information.fallowers+getFallowingInformation())*getInformationOrganization()}function calculateAccuracy(){return(information.fallowers+getFallowingInformation()+streak)*(getInformationOrganization()+information.commitsAvarage+getRepositoriesRelevants())}function calculateStamina(){return information.commits*information.commitsAvarage}function getInformationOrganization(){return 0===information.organizations?1:information.organizations}function getStartInformation(){return information.stars>1e3?1e3:information.stars}function getFallowingInformation(){return information.fallowing>1e3?1e3:information.fallowing}function getRepositoryStar(){return repositories.stars>=4?repositories.stars/2:1}function getRepositoryForks(){return repositories.forks>=4?repositories.forks/2:1}function getRepositoriesRelevants(){return 0==repositories.repositories.relevants.length?1:repositories.repositories.relevants.length}var repositories=avatar.repository,streak=avatar.currentStreak,information=avatar.information,hp=calculateHP(),mp=calculateMP(),pAtack=calculatePAtack(),pDef=calculatePDef(),cast_speed=calculateCastSpeed(),criticalChance=calculateCriticalChance(),accuracy=calculateAccuracy(),stamina=calculateStamina();return{HP:parseInt(hp),MP:parseInt(mp),P_ATCK:parseInt(pAtack),P_DEF:parseInt(pDef),CAST_SPEED:parseInt(cast_speed),CRITICAL:parseInt(criticalChance),ACCURACY:parseInt(accuracy),STAMINA:parseInt(stamina)}};return{calculate:calculate}}])}(window.angular);
"use strict";!function(angular){angular.module("Legend").factory("InformationService",["$http",function($http){var findUser=function(userName){return $http.post("/user",{username:userName}).then(function(res){return res.data})};return{findUser:findUser}}])}(window.angular);
"use strict";!function(angular){angular.module("Legend").factory("RepositoryService",["$http",function($http){var getRepository=function(userName){return $http.post("/repository",{username:userName}).then(function(res){var sumStarAndFork=_.max(_.map(res.data,function(value){return parseInt(value.stars)+parseInt(value.forks)})),groupRepository=_.groupBy(res.data,function(value){return value.language}),language=_.orderBy(groupRepository,"length","desc")[0],bestRepositoty=_.find(res.data,function(value){return parseInt(value.stars)+parseInt(value.forks)==sumStarAndFork}),relevantsRepositories=_.filter(res.data,function(value){return value.stars>5&&value.forks>0}),stars=_.sumBy(res.data,function(value){return parseInt(value.stars)}),forks=_.sumBy(res.data,function(value){return parseInt(value.forks)});return{stars:stars,forks:forks,repositories:{full:res.data,relevants:relevantsRepositories},bestRepositoty:bestRepositoty||"noob",language:language?language[0].language:"noob"}})};return{getRepository:getRepository}}])}(window.angular);
"use strict";!function(angular){angular.module("Legend").factory("StreakService",["$http",function($http){var findStreak=function(userName){return $http.post("/streak",{username:userName}).then(function(res){var currentStreak=[],lastCommit=0;return res.data.forEach(function(data,index){var date=data.date,currentCommit=data.commit;new Date(data.date.replace("-","/")).getTime()<=(new Date).getTime()&&(currentCommit>0&&(lastCommit>0||0===currentStreak.length)?currentStreak.push({date:date,commit:currentCommit}):currentStreak=[]),lastCommit=data.commit}),currentStreak.length})};return{findStreak:findStreak}}])}(window.angular);