"use strict";angular.module("Legend",["ngMaterial","chart.js","ngProgress"]).config(function($mdThemingProvider){$mdThemingProvider.theme("docs-dark")}).config(["ChartJsProvider",function(ChartJsProvider){ChartJsProvider.setOptions({chartColors:["#FF5252","#222222"],responsive:!0}),ChartJsProvider.setOptions("line",{showLines:!1})}]);
"use strict";!function(angular){angular.module("Legend").controller("LegendController",["$scope","$timeout","$q","RepositoryService","StreakService","InformationService","CalculateSkillsService","ngProgressFactory",function($scope,$timeout,$q,RepositoryService,StreakService,InformationService,CalculateSkillsService,ngProgressFactory){$scope.model={user1:"",user2:""},$scope.labels=["HP","MP","P.ATCK","P.DEF","CAST/SPEED","CRITICAL","ACCURACY","STAMINA"],$scope.series=["Avatar"],$scope.inProcess=!1,$scope.progressbar=ngProgressFactory.createInstance(),$scope.compare=function(){$scope.progressbar.start(),$scope.inProcess=!0;var getUser1Repository=RepositoryService.getRepository($scope.model.user1),getUser2Repository=RepositoryService.getRepository($scope.model.user2),getUser1Streak=StreakService.findStreak($scope.model.user1),getUser2Streak=StreakService.findStreak($scope.model.user2),getUser1Information=InformationService.findUser($scope.model.user1),getUser2Information=InformationService.findUser($scope.model.user2);$q.all([getUser1Repository,getUser2Repository,getUser1Streak,getUser2Streak,getUser1Information,getUser2Information]).then(function(data){$timeout($scope.progressbar.complete(),1e3);var user1Repository=data[0],user1Streak=data[2],user1Information=data[4];console.log("current streak "+$scope.model.user1,user1Streak);var avatar1={repository:user1Repository,currentStreak:user1Streak,information:user1Information};$scope.user1Avatar=CalculateSkillsService.calculate(avatar1);var user2Repository=data[1],user2Streak=data[3],user2Information=data[5];console.log("current streak "+$scope.model.user2,user2Streak);var avatar2={repository:user2Repository,currentStreak:user2Streak,information:user2Information};$scope.user2Avatar=CalculateSkillsService.calculate(avatar2),$scope.data=[[$scope.user1Avatar.HP,$scope.user1Avatar.MP,$scope.user1Avatar.P_ATCK,$scope.user1Avatar.P_DEF,$scope.user1Avatar.CAST_SPEED,$scope.user1Avatar.CRITICAL,$scope.user1Avatar.ACCURACY,$scope.user1Avatar.STAMINA],[$scope.user2Avatar.HP,$scope.user2Avatar.MP,$scope.user2Avatar.P_ATCK,$scope.user2Avatar.P_DEF,$scope.user2Avatar.CAST_SPEED,$scope.user2Avatar.CRITICAL,$scope.user2Avatar.ACCURACY,$scope.user2Avatar.STAMINA]],$scope.inProcess=!1})}}])}(window.angular);
"use strict";!function(angular){angular.module("Legend").factory("CalculateSkillsService",["$http",function($http){var calculate=function(avatar){var repositories=avatar.repository,streak=avatar.currentStreak,information=avatar.information,hp=(information.commits+streak)*information.commitsAvarage+(information.fallowers+information.fallowing+information.stars)*(0===information.organizations?1:information.organizations),mp=(information.commits+streak)*information.commitsAvarage,pAtack=(repositories.forks+repositories.stars+repositories.repositories.full.length)*repositories.repositories.relevants.length+information.commits*(information.commitsAvarage+information.organizations),pDef=(repositories.forks+information.fallowers+information.fallowing+repositories.stars+repositories.repositories.full.length)*(0===repositories.repositories.relevants.length?1:repositories.repositories.relevants.length)+information.commits*information.commitsAvarage,cast_speed=information.commits+(0===streak?1:streak)*(0===information.organizations?1:information.organizations),accuracy=(information.fallowers+information.fallowing)*(0===information.organizations?1:information.organizations),stamina=information.commits*information.commitsAvarage,criticalChance=information.commits+streak;return{HP:parseInt(hp),MP:parseInt(mp),P_ATCK:parseInt(pAtack),P_DEF:parseInt(pDef),CAST_SPEED:parseInt(cast_speed),CRITICAL:parseInt(criticalChance),ACCURACY:parseInt(accuracy),STAMINA:parseInt(stamina)}};return{calculate:calculate}}])}(window.angular);
"use strict";!function(angular){angular.module("Legend").factory("InformationService",["$http",function($http){var findUser=function(userName){return $http.post("/user",{username:userName}).then(function(res){return res.data})};return{findUser:findUser}}])}(window.angular);
"use strict";!function(angular){angular.module("Legend").factory("RepositoryService",["$http",function($http){var getRepository=function(userName){return $http.post("/repository",{username:userName}).then(function(res){var sumStarAndFork=_.max(_.map(res.data,function(value){return parseInt(value.stars)+parseInt(value.forks)})),groupRepository=_.groupBy(res.data,function(value){return value.language}),language=_.orderBy(groupRepository,"length","desc")[0],bestRepositoty=_.find(res.data,function(value){return parseInt(value.stars)+parseInt(value.forks)==sumStarAndFork}),relevantsRepositories=_.filter(res.data,function(value){return value.stars>5&&value.forks>0}),stars=_.sumBy(res.data,function(value){return parseInt(value.stars)}),forks=_.sumBy(res.data,function(value){return parseInt(value.forks)});return{stars:stars,forks:forks,repositories:{full:res.data,relevants:relevantsRepositories},bestRepositoty:bestRepositoty||"noob",language:language?language[0].language:"noob"}})};return{getRepository:getRepository}}])}(window.angular);
"use strict";!function(angular){angular.module("Legend").factory("StreakService",["$http",function($http){var findStreak=function(userName){return $http.post("/streak",{username:userName}).then(function(res){var currentStreak=[],lastCommit=0;return res.data.forEach(function(data,index){var date=data.date,currentCommit=data.commit;new Date(data.date.replace("-","/")).getTime()<=(new Date).getTime()&&(currentCommit>0&&(lastCommit>0||0===currentStreak.length)?currentStreak.push({date:date,commit:currentCommit}):currentStreak=[]),lastCommit=data.commit}),currentStreak.length})};return{findStreak:findStreak}}])}(window.angular);